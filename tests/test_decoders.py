import torch
import torch.nn as nn
import pytest
from kgate.decoders import TransE
from kgate.utils import set_random_seeds

@pytest.fixture
def generate_embeddings():
    set_random_seeds(42)
    ent = nn.Embedding(10, 32)
    rel = nn.Embedding(5, 32)
    
    return ent, rel

@pytest.fixture
def transe_model():
    return TransE(emb_dim=32, n_entities=10, n_relations=5, dissimilarity_type='L2')

def test_embedding_generation(generate_embeddings):
    expected_ent_tensor = torch.tensor([[ 1.9269e+00,  1.4873e+00,  9.0072e-01, -2.1055e+00,  6.7842e-01,
         -1.2345e+00, -4.3067e-02, -1.6047e+00, -7.5214e-01,  1.6487e+00,
         -3.9248e-01, -1.4036e+00, -7.2788e-01, -5.5943e-01, -7.6884e-01,
          7.6245e-01,  1.6423e+00, -1.5960e-01, -4.9740e-01,  4.3959e-01,
         -7.5813e-01,  1.0783e+00,  8.0080e-01,  1.6806e+00,  1.2791e+00,
          1.2964e+00,  6.1047e-01,  1.3347e+00, -2.3162e-01,  4.1759e-02,
         -2.5158e-01,  8.5986e-01],
        [-1.3847e+00, -8.7124e-01, -2.2337e-01,  1.7174e+00,  3.1888e-01,
         -4.2452e-01,  3.0572e-01, -7.7459e-01, -1.5576e+00,  9.9564e-01,
         -8.7979e-01, -6.0114e-01, -1.2742e+00,  2.1228e+00, -1.2347e+00,
         -4.8791e-01, -9.1382e-01, -6.5814e-01,  7.8024e-02,  5.2581e-01,
         -4.8799e-01,  1.1914e+00, -8.1401e-01, -7.3599e-01, -1.4032e+00,
          3.6004e-02, -6.3477e-02,  6.7561e-01, -9.7807e-02,  1.8446e+00,
         -1.1845e+00,  1.3835e+00],
        [ 1.4451e+00,  8.5641e-01,  2.2181e+00,  5.2317e-01,  3.4665e-01,
         -1.9733e-01, -1.0546e+00,  1.2780e+00, -1.7219e-01,  5.2379e-01,
          5.6622e-02,  4.2630e-01,  5.7501e-01, -6.4172e-01, -2.2064e+00,
         -7.5080e-01,  1.0868e-02, -3.3874e-01, -1.3407e+00, -5.8537e-01,
          5.3619e-01,  5.2462e-01,  1.1412e+00,  5.1644e-02,  7.4395e-01,
         -4.8158e-01, -1.0495e+00,  6.0390e-01, -1.7223e+00, -8.2777e-01,
          1.3347e+00,  4.8354e-01],
        [-2.5095e+00,  4.8800e-01,  7.8459e-01,  2.8647e-02,  6.4076e-01,
          5.8325e-01,  1.0669e+00, -4.5015e-01, -1.8527e-01,  7.5276e-01,
          4.0476e-01,  1.7847e-01,  2.6491e-01,  1.2732e+00, -1.3109e-03,
         -3.0360e-01, -1.4570e+00, -1.0234e-01, -5.9915e-01,  4.7706e-01,
          7.2618e-01,  9.1152e-02, -3.8907e-01,  5.2792e-01, -1.2685e-02,
          2.4084e-01,  1.3254e-01,  7.6424e-01,  1.0950e+00,  3.3989e-01,
          7.1997e-01,  4.1141e-01],
        [ 1.9312e+00,  1.0119e+00, -1.4364e+00, -1.1299e+00, -1.3603e-01,
          1.6354e+00,  6.5474e-01,  5.7600e-01,  1.1415e+00,  1.8565e-02,
         -1.8058e+00,  9.2543e-01, -3.7534e-01,  1.0331e+00, -6.8665e-01,
          6.3681e-01, -9.7267e-01,  9.5846e-01,  1.6192e+00,  1.4506e+00,
          2.6948e-01, -2.1038e-01, -7.3280e-01,  1.0430e-01,  3.4875e-01,
          9.6759e-01, -4.6569e-01,  1.6048e+00, -2.4801e+00, -4.1754e-01,
         -1.1955e+00,  8.1234e-01],
        [-1.9006e+00,  2.2858e-01,  2.4859e-02, -3.4595e-01,  2.8683e-01,
         -7.3084e-01,  1.7482e-01, -1.0939e+00, -1.6022e+00,  1.3529e+00,
          1.2888e+00,  5.2295e-02, -1.5469e+00,  7.5671e-01,  7.7552e-01,
          2.0265e+00,  3.5818e-02,  1.2059e-01, -8.0566e-01, -2.0758e-01,
         -9.3195e-01, -1.5910e+00, -1.1360e+00, -5.2260e-01, -5.1877e-01,
         -1.5013e+00, -1.9267e+00,  1.2785e-01,  1.0229e+00, -5.5580e-01,
          7.0427e-01,  7.0988e-01],
        [ 1.7744e+00, -9.2155e-01,  9.6245e-01, -3.3702e-01, -1.1753e+00,
          3.5806e-01,  4.7877e-01,  1.3537e+00,  5.2606e-01,  2.1120e+00,
         -5.2076e-01, -9.3201e-01,  1.8516e-01,  1.0687e+00,  1.3065e+00,
          4.5983e-01, -8.1463e-01, -1.0212e+00, -4.9492e-01, -5.9225e-01,
          1.5432e-01,  4.4077e-01, -1.4829e-01, -2.3184e+00, -3.9800e-01,
          1.0805e+00, -1.7809e+00,  1.5080e+00,  3.0943e-01, -5.0031e-01,
          1.0350e+00,  1.6896e+00],
        [-4.5051e-03,  1.6668e+00,  1.5392e-01, -1.0603e+00, -5.7266e-01,
          8.3568e-02,  3.9991e-01,  1.9892e+00, -7.1988e-02, -9.0609e-01,
         -2.0487e+00, -1.0811e+00,  1.7623e-02,  7.8226e-02,  1.9316e-01,
          4.0967e-01, -9.2913e-01,  2.7619e-01, -5.3888e-01,  4.6258e-01,
         -8.7189e-01, -2.7118e-02, -3.5325e-01,  1.4639e+00,  1.2554e+00,
         -7.1496e-01,  8.5392e-01,  5.1299e-01,  5.3973e-01,  5.6551e-01,
          5.0579e-01,  2.2245e-01],
        [-6.8548e-01,  5.6356e-01, -1.5072e+00, -1.6107e+00, -1.4790e+00,
          4.3227e-01, -1.2503e-01,  7.8212e-01, -1.5988e+00, -1.0913e-01,
          7.1520e-01,  3.9139e-02,  1.3059e+00,  2.4659e-01, -1.9776e+00,
          1.7896e-02, -1.3793e+00,  6.2580e-01, -2.5850e+00, -2.4000e-02,
         -1.2219e-01, -7.4700e-01,  1.7093e+00,  5.7923e-02,  1.1930e+00,
          1.9373e+00,  7.2871e-01,  9.8089e-01,  4.1459e-01,  1.1566e+00,
          2.6905e-01, -3.6629e-02],
        [ 9.7329e-01, -1.0151e+00, -5.4192e-01, -4.4102e-01, -3.1362e-01,
         -1.2925e-01, -7.1496e-01, -4.7562e-02,  2.0207e+00,  2.5392e-01,
          9.3644e-01,  7.1224e-01, -3.1766e-02,  1.0164e-01,  1.3433e+00,
          7.1327e-01,  4.0380e-01, -7.1398e-01,  8.3373e-01, -9.5855e-01,
          4.5363e-01,  1.2461e+00, -2.3065e+00, -1.2869e+00,  1.7989e-01,
         -2.1268e+00, -1.3408e-01, -1.0408e+00, -7.6472e-01, -5.5283e-02,
          1.2049e+00, -9.8247e-01]])
    expected_rel_tensor = torch.tensor([[ 4.3344e-01, -7.1719e-01,  1.0554e+00, -1.4534e+00,  4.6515e-01,
          3.7139e-01, -4.6568e-03,  7.9549e-02,  3.7818e-01,  7.0511e-01,
         -1.7237e+00, -8.4348e-01,  4.3514e-01,  2.6589e-01, -5.8710e-01,
          8.2689e-02,  8.8538e-01,  1.8244e-01,  7.8638e-01, -5.7920e-02,
          5.6667e-01, -7.0976e-01, -4.8751e-01,  5.0096e-02,  6.0841e-01,
          1.6309e+00, -8.4723e-02,  1.0844e+00,  9.4777e-01, -6.7663e-01,
         -5.7302e-01, -3.3032e-01],
        [-7.9394e-01,  3.7523e-01,  8.7910e-02, -1.2415e+00, -3.2025e-01,
         -8.4438e-01, -5.5135e-01,  1.9890e+00,  1.9003e+00,  1.6951e+00,
          2.8090e-02, -1.7537e-01, -1.7735e+00, -7.0464e-01, -3.9465e-01,
          1.8868e+00, -2.1844e-01,  1.6630e-01,  2.1442e+00,  1.7046e+00,
          3.4590e-01,  6.4248e-01, -2.0395e-01,  6.8537e-01, -1.3969e-01,
         -1.1808e+00, -1.2829e+00,  4.4849e-01, -5.9074e-01,  8.5406e-01,
         -4.9007e-01, -3.5946e-01],
        [ 6.6637e-01, -7.4265e-02, -2.0960e-01,  1.6632e-01,  1.4703e+00,
         -9.3909e-01, -6.0132e-01, -9.9640e-02, -9.8515e-01, -2.4885e+00,
         -3.3132e-01,  8.4358e-01,  9.8745e-01, -3.3197e-01, -8.0762e-01,
          8.2436e-01,  2.4700e-02, -1.0641e+00, -7.6019e-01, -4.0751e-01,
          9.6236e-01, -1.4264e-01,  1.5271e-01, -3.8802e-02,  9.4461e-01,
         -1.5824e+00,  9.8713e-01,  1.1457e+00, -1.4181e-01, -2.7634e-01,
         -1.9321e-01,  7.7678e-01],
        [ 6.8388e-01, -1.3246e+00, -5.1608e-01,  6.0018e-01, -4.7022e-01,
         -6.0864e-01, -4.6192e-02, -1.6457e+00, -4.8333e-01, -7.4029e-01,
          3.1428e-01,  1.4156e-01,  1.0348e+00, -6.2644e-01, -5.1509e-01,
          6.9029e-01, -4.9400e-01,  1.1366e+00, -4.6184e-01,  1.4200e+00,
          8.4852e-01, -4.7891e-02,  6.6856e-01,  1.0430e+00,  6.8990e-01,
         -1.3129e+00,  3.7804e-02, -1.1702e+00, -1.0319e-01,  1.1895e+00,
          7.6069e-01, -7.4630e-01],
        [-1.3839e+00,  4.8687e-01, -1.0020e+00,  3.2949e-02, -4.2920e-01,
         -9.8180e-01, -6.4206e-01,  8.2659e-01,  1.5914e+00, -1.2081e-01,
         -4.8302e-01,  1.1330e-01,  7.7151e-02, -9.2281e-01, -1.2620e+00,
          1.0861e+00,  1.0966e+00, -6.8369e-01,  6.6043e-02, -7.7380e-04,
          1.6206e-01,  1.1960e+00, -1.3062e+00, -1.4040e+00, -1.0597e+00,
          3.0573e-01,  4.1506e-01, -7.1741e-01,  2.8340e+00,  1.9535e+00,
          2.0487e+00, -1.0880e+00]])
    ent, rel = generate_embeddings
    #print(expected_ent_tensor[~expected_ent_tensor.unsqueeze(1).eq(ent.weight.data).any(1)] )
    assert torch.allclose(ent.weight.data, expected_ent_tensor, rtol=1e-04), "Entity tensor is not the expected one."
    assert torch.allclose(rel.weight.data, expected_rel_tensor, rtol=1e-04), "Relation tensor is not the expected one."


def test_initialization(transe_model):
    assert transe_model.emb_dim == 32
    assert transe_model.n_ent == 10
    assert transe_model.n_rel == 5

def test_score_function(transe_model, generate_embeddings):
    h = torch.tensor([0,1,2,3,4])
    t = torch.tensor([5,6,7,8,9])
    r = torch.tensor([1,1,3,3,4])
    ent, rel = generate_embeddings

    score = transe_model.score(h_emb=ent(h), r_emb=rel(r), t_emb=ent(t))

    expected_score = torch.tensor([-36.1772, -35.7120, -23.7277, -20.9174, -32.3205])
    assert torch.allclose(score, expected_score, rtol=1e04), "Given score is not the expected one."

def test_get_embeddings(transe_model):
    assert transe_model.get_embeddings() is None
